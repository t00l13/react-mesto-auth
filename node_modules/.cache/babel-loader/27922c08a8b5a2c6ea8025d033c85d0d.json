{"ast":null,"code":"//     КЛАСС ДЛЯ ОТПРАВКИ ЗАПРОСОВ НА СЕРВЕР\nclass Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._userUrl = `${this._baseUrl}/users/me`;\n    this._cardsUrl = `${this._baseUrl}/cards`;\n    this._likesUrl = `${this._baseUrl}/cards/likes`;\n    this._token = headers['authorization'];\n  }\n\n  _handleResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Что-то не так, ошибка: ${res.status}`);\n  } //--- МЕТОД ПОЛУЧЕНИЯ ИНФОРМАЦИИ ПОЛЬЗОВАТЕЛЯ\n\n\n  getUserData() {\n    return fetch(this._userUrl, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._handleResponse);\n  } //--- МЕТОД СОХРАНЕНИЯ ИНФОРМАЦИИ ИНФОРМАЦИИ ПОЛЬЗОВАТЕЛЯ\n\n\n  saveUserChanges(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    return fetch(this._userUrl, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._handleResponse);\n  } //--- МЕТОД СМЕНЫ АВАТАРА ПОЛЬЗОВАТЕЛЯ\n\n\n  changeAvatar(src) {\n    return fetch(`${this._userUrl}/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: src\n      })\n    }).then(this._handleResponse);\n  } //--- МЕТОД ПОЛУЧЕНИЯ КАРТОЧЕК С СЕРВЕРА\n\n\n  getInitialCards() {\n    return fetch(this._cardsUrl, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._handleResponse);\n  } //--- МЕТОД ПУБЛИКАЦИИ НОВОЙ КАРТОЧКИ \n\n\n  postNewCard(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return fetch(this._cardsUrl, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(this._handleResponse);\n  } //--- МЕТОД УДАЛЕНИЕ КАРТОЧКИ\n\n\n  deleteCard(cardId) {\n    return fetch(`${this._cardsUrl}/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._handleResponse);\n  } //--- МЕТОД ЛАЙКА КАРТОЧКИ\n\n\n  changeLikeCardStatus(cardId, isNotLiked) {\n    return fetch(`${this._likesUrl}/${cardId}`, {\n      method: isNotLiked ? 'PUT' : 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._handleResponse);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-45',\n  headers: {\n    authorization: 'fcd67938-a1e9-408c-8c74-faa990c9d125',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrl","_userUrl","_cardsUrl","_likesUrl","_token","_handleResponse","res","ok","json","Promise","reject","status","getUserData","fetch","authorization","then","saveUserChanges","name","about","method","body","JSON","stringify","changeAvatar","src","avatar","getInitialCards","postNewCard","link","deleteCard","cardId","changeLikeCardStatus","isNotLiked","api"],"sources":["/Users/toolie/dev/mesto-react/src/utils/api.js"],"sourcesContent":["//     КЛАСС ДЛЯ ОТПРАВКИ ЗАПРОСОВ НА СЕРВЕР\n class Api {\n    constructor({ baseUrl, headers}) {\n        this._baseUrl = baseUrl;\n        this._userUrl = `${this._baseUrl}/users/me`;\n        this._cardsUrl = `${this._baseUrl}/cards`;\n        this._likesUrl = `${this._baseUrl}/cards/likes`;\n        this._token = headers['authorization'];\n    }\n\n    _handleResponse (res) {\n        if(res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Что-то не так, ошибка: ${res.status}`);\n    }\n    //--- МЕТОД ПОЛУЧЕНИЯ ИНФОРМАЦИИ ПОЛЬЗОВАТЕЛЯ\n    getUserData(){\n        return fetch(this._userUrl, {\n            headers: {\n                authorization: this._token,\n            }\n        })\n        .then( this._handleResponse)\n    }\n    //--- МЕТОД СОХРАНЕНИЯ ИНФОРМАЦИИ ИНФОРМАЦИИ ПОЛЬЗОВАТЕЛЯ\n    saveUserChanges({ name, about }) {\n        return fetch(this._userUrl, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: name,\n                about: about,\n            })\n        })\n        .then(this._handleResponse)\n    }\n    //--- МЕТОД СМЕНЫ АВАТАРА ПОЛЬЗОВАТЕЛЯ\n    changeAvatar(src) {\n        return fetch(`${this._userUrl}/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type' : 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: src\n            })\n        })\n        .then(this._handleResponse)\n    }\n    //--- МЕТОД ПОЛУЧЕНИЯ КАРТОЧЕК С СЕРВЕРА\n    getInitialCards() {\n        return fetch(this._cardsUrl, {\n            headers: {\n                authorization:this._token,\n            }\n        })\n        .then(this._handleResponse)\n    }\n    //--- МЕТОД ПУБЛИКАЦИИ НОВОЙ КАРТОЧКИ \n    postNewCard({ name, link }) {\n        return fetch(this._cardsUrl, {\n            method: 'POST',\n            headers: {\n                authorization: this._token,\n                'Content-Type' : 'application/json'\n            },\n            body: JSON.stringify({\n                name: name,\n                link: link\n            }) \n        })\n        .then(this._handleResponse)\n    }\n    //--- МЕТОД УДАЛЕНИЕ КАРТОЧКИ\n    deleteCard(cardId){\n        return fetch(`${this._cardsUrl}/${cardId}`, {\n            method:'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n        .then(this._handleResponse)\n    }\n    //--- МЕТОД ЛАЙКА КАРТОЧКИ\n    changeLikeCardStatus(cardId, isNotLiked) {\n        return fetch(`${this._likesUrl}/${cardId}`, {\n            method: isNotLiked ? 'PUT' : 'DELETE',\n            headers: {\n                authorization:this._token,\n            }\n        })\n        .then(this._handleResponse)\n    }\n }\n\nconst api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-45',\n    headers: {\n      authorization: 'fcd67938-a1e9-408c-8c74-faa990c9d125',\n      'Content-Type': 'application/json'\n    }\n  });\n  \n  export default api;"],"mappings":"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"},"metadata":{},"sourceType":"module"}