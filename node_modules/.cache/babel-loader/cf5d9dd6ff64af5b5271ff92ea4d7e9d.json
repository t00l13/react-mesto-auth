{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\n\nconst useFormWithValidation = () => {\n  _s();\n\n  const [values, setValues] = React.useState({});\n  const [errors, setErrors] = React.useState({});\n  const [isValid, setIsValid] = React.useState(false);\n  React.useEffect(() => {\n    setIsFormNotValid(isErrors.name || isErrors.about);\n  }, [isErrors.name, isErrors.about]);\n\n  const onChange = evt => {\n    setValues(values => ({ ...values,\n      [evt.target.name]: evt.target.value\n    }));\n    setIsErrors(isErrors => ({ ...isErrors,\n      [evt.target.name]: evt.validity.value\n    }));\n\n    if (!evt.target.validity.value) {\n      setErrorMessages({ ...errorMessages,\n        [evt.target.name]: evt.target.validationMessage\n      });\n    } else {\n      setErrorMessages({ ...errorMessages,\n        [evt.target.name]: ''\n      });\n    }\n  };\n\n  return {\n    values,\n    isErrors,\n    errorMessages,\n    isFormNotValid,\n    setValues,\n    onChange\n  };\n};\n\n_s(useFormWithValidation, \"0dYVphmz8lMkpcGyC9vAAproofg=\");\n\nexport default useFormWithValidation;","map":{"version":3,"names":["React","useFormWithValidation","values","setValues","useState","errors","setErrors","isValid","setIsValid","useEffect","setIsFormNotValid","isErrors","name","about","onChange","evt","target","value","setIsErrors","validity","setErrorMessages","errorMessages","validationMessage","isFormNotValid"],"sources":["/Users/toolie/dev/mesto-react/src/utils/hooks/useFormWithValidation.js"],"sourcesContent":["import React from 'react';\n\nconst useFormWithValidation = () => {\n    const [values, setValues] = React.useState({});\n    const [errors, setErrors] = React.useState({});\n    const [isValid, setIsValid] = React.useState(false)\n\n    React.useEffect(() => {\n        setIsFormNotValid(isErrors.name || isErrors.about);\n    }, [isErrors.name, isErrors.about]);\n\n    const onChange = (evt) => {\n        setValues((values) => ({...values, [evt.target.name]: evt.target.value}));\n        setIsErrors((isErrors) => ({...isErrors, [evt.target.name]: evt.validity.value}));\n        if(!evt.target.validity.value) {\n            setErrorMessages({...errorMessages, [evt.target.name]: evt.target.validationMessage});\n        } else {\n            setErrorMessages({...errorMessages, [evt.target.name]: ''});\n        }\n    };\n\n    return {\n        values,\n        isErrors,\n        errorMessages,\n        isFormNotValid,\n        setValues,\n        onChange,\n    }\n};\n\nexport default useFormWithValidation;"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAqB,GAAG,MAAM;EAAA;;EAChC,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,KAAK,CAACI,QAAN,CAAe,EAAf,CAA5B;EACA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACI,QAAN,CAAe,EAAf,CAA5B;EACA,MAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBR,KAAK,CAACI,QAAN,CAAe,KAAf,CAA9B;EAEAJ,KAAK,CAACS,SAAN,CAAgB,MAAM;IAClBC,iBAAiB,CAACC,QAAQ,CAACC,IAAT,IAAiBD,QAAQ,CAACE,KAA3B,CAAjB;EACH,CAFD,EAEG,CAACF,QAAQ,CAACC,IAAV,EAAgBD,QAAQ,CAACE,KAAzB,CAFH;;EAIA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;IACtBZ,SAAS,CAAED,MAAD,KAAa,EAAC,GAAGA,MAAJ;MAAY,CAACa,GAAG,CAACC,MAAJ,CAAWJ,IAAZ,GAAmBG,GAAG,CAACC,MAAJ,CAAWC;IAA1C,CAAb,CAAD,CAAT;IACAC,WAAW,CAAEP,QAAD,KAAe,EAAC,GAAGA,QAAJ;MAAc,CAACI,GAAG,CAACC,MAAJ,CAAWJ,IAAZ,GAAmBG,GAAG,CAACI,QAAJ,CAAaF;IAA9C,CAAf,CAAD,CAAX;;IACA,IAAG,CAACF,GAAG,CAACC,MAAJ,CAAWG,QAAX,CAAoBF,KAAxB,EAA+B;MAC3BG,gBAAgB,CAAC,EAAC,GAAGC,aAAJ;QAAmB,CAACN,GAAG,CAACC,MAAJ,CAAWJ,IAAZ,GAAmBG,GAAG,CAACC,MAAJ,CAAWM;MAAjD,CAAD,CAAhB;IACH,CAFD,MAEO;MACHF,gBAAgB,CAAC,EAAC,GAAGC,aAAJ;QAAmB,CAACN,GAAG,CAACC,MAAJ,CAAWJ,IAAZ,GAAmB;MAAtC,CAAD,CAAhB;IACH;EACJ,CARD;;EAUA,OAAO;IACHV,MADG;IAEHS,QAFG;IAGHU,aAHG;IAIHE,cAJG;IAKHpB,SALG;IAMHW;EANG,CAAP;AAQH,CA3BD;;GAAMb,qB;;AA6BN,eAAeA,qBAAf"},"metadata":{},"sourceType":"module"}